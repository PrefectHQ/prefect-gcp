{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-gcp Welcome! prefect-gcp is a collection of prebuilt Prefect tasks that can be used to quickly construct Prefect flows. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-gcp with pip : pip install prefect-gcp To use Cloud Storage: pip install \"prefect-gcp[cloud_storage]\" To use BigQuery: pip install \"prefect-gcp[bigquery]\" To use Secret Manager: pip install \"prefect-gcp[secret_manager]\" Write and run a flow from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_download_blob @flow () def example_cloud_storage_download_blob_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) contents = cloud_storage_download_blob ( \"bucket\" , \"blob\" , gcp_credentials ) return contents example_cloud_storage_download_blob_flow () Resources If you encounter and bugs while using prefect-gcp , feel free to open an issue in the prefect-gcp repository. If you have any questions or issues while using prefect-gcp , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-gcp for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-gcp.git cd prefect-gcp/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-gcp","text":"","title":"prefect-gcp"},{"location":"#welcome","text":"prefect-gcp is a collection of prebuilt Prefect tasks that can be used to quickly construct Prefect flows.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-gcp with pip : pip install prefect-gcp To use Cloud Storage: pip install \"prefect-gcp[cloud_storage]\" To use BigQuery: pip install \"prefect-gcp[bigquery]\" To use Secret Manager: pip install \"prefect-gcp[secret_manager]\"","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_download_blob @flow () def example_cloud_storage_download_blob_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) contents = cloud_storage_download_blob ( \"bucket\" , \"blob\" , gcp_credentials ) return contents example_cloud_storage_download_blob_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter and bugs while using prefect-gcp , feel free to open an issue in the prefect-gcp repository. If you have any questions or issues while using prefect-gcp , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-gcp for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-gcp.git cd prefect-gcp/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"bigquery/","text":"prefect_gcp.bigquery Tasks for interacting with GCP BigQuery bigquery_create_table async Creates table in BigQuery. Parameters: Name Type Description Default dataset str Name of a dataset in that the table will be created. required table str Name of a table to create. required schema List [ SchemaField ] Schema to use when creating the table. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required clustering_fields List [ str ] List of fields to cluster the table by. None time_partitioning TimePartitioning bigquery.TimePartitioning object specifying a partitioning of the newly created table None project Optional [ str ] Project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. None location str location of the dataset that will be written to. 'US' Returns: Type Description str Table name. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_create_table from google.cloud.bigquery import SchemaField @flow def example_bigquery_create_table_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) schema = [ SchemaField ( \"number\" , field_type = \"INTEGER\" , mode = \"REQUIRED\" ), SchemaField ( \"text\" , field_type = \"STRING\" , mode = \"REQUIRED\" ), SchemaField ( \"bool\" , field_type = \"BOOLEAN\" ) ] result = bigquery_create_table ( dataset = \"dataset\" , table = \"test_table\" , schema = schema , gcp_credentials = gcp_credentials ) return result example_bigquery_create_table_flow () Source code in prefect_gcp/bigquery.py 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 @task async def bigquery_create_table ( dataset : str , table : str , schema : List [ SchemaField ], gcp_credentials : \"GcpCredentials\" , clustering_fields : List [ str ] = None , time_partitioning : TimePartitioning = None , project : Optional [ str ] = None , location : str = \"US\" , ) -> str : \"\"\" Creates table in BigQuery. Args: dataset: Name of a dataset in that the table will be created. table: Name of a table to create. schema: Schema to use when creating the table. gcp_credentials: Credentials to use for authentication with GCP. clustering_fields: List of fields to cluster the table by. time_partitioning: `bigquery.TimePartitioning` object specifying a partitioning of the newly created table project: Project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. location: location of the dataset that will be written to. Returns: Table name. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_create_table from google.cloud.bigquery import SchemaField @flow def example_bigquery_create_table_flow(): gcp_credentials = GcpCredentials(project=\"project\") schema = [ SchemaField(\"number\", field_type=\"INTEGER\", mode=\"REQUIRED\"), SchemaField(\"text\", field_type=\"STRING\", mode=\"REQUIRED\"), SchemaField(\"bool\", field_type=\"BOOLEAN\") ] result = bigquery_create_table( dataset=\"dataset\", table=\"test_table\", schema=schema, gcp_credentials=gcp_credentials ) return result example_bigquery_create_table_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Creating %s . %s \" , dataset , table ) client = gcp_credentials . get_bigquery_client ( project = project , location = location ) try : partial_get_dataset = partial ( client . get_dataset , dataset ) dataset_ref = await to_thread . run_sync ( partial_get_dataset ) except NotFound : logger . debug ( \"Dataset %s not found, creating\" , dataset ) partial_create_dataset = partial ( client . create_dataset , dataset ) dataset_ref = await to_thread . run_sync ( partial_create_dataset ) table_ref = dataset_ref . table ( table ) try : partial_get_table = partial ( client . get_table , table_ref ) await to_thread . run_sync ( partial_get_table ) logger . info ( \" %s . %s already exists\" , dataset , table ) except NotFound : logger . debug ( \"Table %s not found, creating\" , table ) table_obj = Table ( table_ref , schema = schema ) # cluster for optimal data sorting/access if clustering_fields : table_obj . clustering_fields = clustering_fields # partitioning if time_partitioning : table_obj . time_partitioning = time_partitioning partial_create_table = partial ( client . create_table , table_obj ) await to_thread . run_sync ( partial_create_table ) return table bigquery_insert_stream async Insert records in a Google BigQuery table via the streaming API . Parameters: Name Type Description Default dataset str Name of a dataset where the records will be written to. required table str Name of a table to write to. required records List [ dict ] The list of records to insert as rows into the BigQuery table; each item in the list should be a dictionary whose keys correspond to columns in the table. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required project Optional [ str ] The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. None location str Location of the dataset that will be written to. 'US' Returns: Type Description List List of inserted rows. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_insert_stream from google.cloud.bigquery import SchemaField @flow def example_bigquery_insert_stream_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) records = [ { \"number\" : 1 , \"text\" : \"abc\" , \"bool\" : True }, { \"number\" : 2 , \"text\" : \"def\" , \"bool\" : False }, ] result = bigquery_insert_stream ( dataset = \"integrations\" , table = \"test_table\" , records = records , gcp_credentials = gcp_credentials ) return result example_bigquery_insert_stream_flow () Source code in prefect_gcp/bigquery.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 @task async def bigquery_insert_stream ( dataset : str , table : str , records : List [ dict ], gcp_credentials : \"GcpCredentials\" , project : Optional [ str ] = None , location : str = \"US\" , ) -> List : \"\"\" Insert records in a Google BigQuery table via the [streaming API](https://cloud.google.com/bigquery/streaming-data-into-bigquery). Args: dataset: Name of a dataset where the records will be written to. table: Name of a table to write to. records: The list of records to insert as rows into the BigQuery table; each item in the list should be a dictionary whose keys correspond to columns in the table. gcp_credentials: Credentials to use for authentication with GCP. project: The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. location: Location of the dataset that will be written to. Returns: List of inserted rows. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_insert_stream from google.cloud.bigquery import SchemaField @flow def example_bigquery_insert_stream_flow(): gcp_credentials = GcpCredentials(project=\"project\") records = [ {\"number\": 1, \"text\": \"abc\", \"bool\": True}, {\"number\": 2, \"text\": \"def\", \"bool\": False}, ] result = bigquery_insert_stream( dataset=\"integrations\", table=\"test_table\", records=records, gcp_credentials=gcp_credentials ) return result example_bigquery_insert_stream_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Inserting into %s . %s as a stream\" , dataset , table ) client = gcp_credentials . get_bigquery_client ( project = project , location = location ) table_ref = client . dataset ( dataset ) . table ( table ) partial_insert = partial ( client . insert_rows_json , table = table_ref , json_rows = records ) response = await to_thread . run_sync ( partial_insert ) errors = [] output = [] for row in response : output . append ( row ) if \"errors\" in row : errors . append ( row [ \"errors\" ]) if errors : raise ValueError ( errors ) return output bigquery_load_cloud_storage async Run method for this Task. Invoked by calling this Task within a Flow context, after initialization. Parameters: Name Type Description Default uri str GCS path to load data from. required dataset str The id of a destination dataset to write the records to. required table str The name of a destination table to write the records to. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required schema Optional [ List [ SchemaField ]] The schema to use when creating the table. None job_config Optional [ dict ] Dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). None project Optional [ str ] The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. None location str Location of the dataset that will be written to. 'US' Returns: Type Description LoadJob The response from load_table_from_uri . Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_load_cloud_storage @flow def example_bigquery_load_cloud_storage_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) result = bigquery_load_cloud_storage ( dataset = \"dataset\" , table = \"test_table\" , uri = \"uri\" , gcp_credentials = gcp_credentials ) return result example_bigquery_load_cloud_storage_flow () Source code in prefect_gcp/bigquery.py 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 @task async def bigquery_load_cloud_storage ( dataset : str , table : str , uri : str , gcp_credentials : \"GcpCredentials\" , schema : Optional [ List [ SchemaField ]] = None , job_config : Optional [ dict ] = None , project : Optional [ str ] = None , location : str = \"US\" , ) -> LoadJob : \"\"\" Run method for this Task. Invoked by _calling_ this Task within a Flow context, after initialization. Args: uri: GCS path to load data from. dataset: The id of a destination dataset to write the records to. table: The name of a destination table to write the records to. gcp_credentials: Credentials to use for authentication with GCP. schema: The schema to use when creating the table. job_config: Dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). project: The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. location: Location of the dataset that will be written to. Returns: The response from `load_table_from_uri`. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_load_cloud_storage @flow def example_bigquery_load_cloud_storage_flow(): gcp_credentials = GcpCredentials(project=\"project\") result = bigquery_load_cloud_storage( dataset=\"dataset\", table=\"test_table\", uri=\"uri\", gcp_credentials=gcp_credentials ) return result example_bigquery_load_cloud_storage_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Loading into %s . %s from cloud storage\" , dataset , table ) client = gcp_credentials . get_bigquery_client ( project = project , location = location ) table_ref = client . dataset ( dataset ) . table ( table ) job_config = job_config or {} if \"autodetect\" not in job_config : job_config [ \"autodetect\" ] = True job_config = LoadJobConfig ( ** job_config ) if schema : job_config . schema = schema result = None try : partial_load = partial ( _result_sync , client . load_table_from_uri , uri , table_ref , job_config = job_config , ) result = await to_thread . run_sync ( partial_load ) except Exception as exception : logger . exception ( exception ) if result is not None and result . errors is not None : for error in result . errors : logger . exception ( error ) raise if result is not None : # remove unpickleable attributes result . _client = None result . _completion_lock = None return result bigquery_load_file async Loads file into BigQuery. Parameters: Name Type Description Default dataset str ID of a destination dataset to write the records to; if not provided here, will default to the one provided at initialization. required table str Name of a destination table to write the records to; if not provided here, will default to the one provided at initialization. required path Union [ str , Path ] A string or path-like object of the file to be loaded. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required schema Optional [ List [ SchemaField ]] Schema to use when creating the table. None job_config Optional [ dict ] An optional dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). None rewind bool if True, seek to the beginning of the file handle before reading the file. False size Optional [ int ] Number of bytes to read from the file handle. If size is None or large, resumable upload will be used. Otherwise, multipart upload will be used. None project Optional [ str ] Project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. None location str location of the dataset that will be written to. 'US' Returns: Type Description LoadJob The response from load_table_from_file . Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_load_file from google.cloud.bigquery import SchemaField @flow def example_bigquery_load_file_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) result = bigquery_load_file ( dataset = \"dataset\" , table = \"test_table\" , path = \"path\" , gcp_credentials = gcp_credentials ) return result example_bigquery_load_file_flow () Source code in prefect_gcp/bigquery.py 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 @task async def bigquery_load_file ( dataset : str , table : str , path : Union [ str , Path ], gcp_credentials : \"GcpCredentials\" , schema : Optional [ List [ SchemaField ]] = None , job_config : Optional [ dict ] = None , rewind : bool = False , size : Optional [ int ] = None , project : Optional [ str ] = None , location : str = \"US\" , ) -> LoadJob : \"\"\" Loads file into BigQuery. Args: dataset: ID of a destination dataset to write the records to; if not provided here, will default to the one provided at initialization. table: Name of a destination table to write the records to; if not provided here, will default to the one provided at initialization. path: A string or path-like object of the file to be loaded. gcp_credentials: Credentials to use for authentication with GCP. schema: Schema to use when creating the table. job_config: An optional dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). rewind: if True, seek to the beginning of the file handle before reading the file. size: Number of bytes to read from the file handle. If size is None or large, resumable upload will be used. Otherwise, multipart upload will be used. project: Project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. location: location of the dataset that will be written to. Returns: The response from `load_table_from_file`. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_load_file from google.cloud.bigquery import SchemaField @flow def example_bigquery_load_file_flow(): gcp_credentials = GcpCredentials(project=\"project\") result = bigquery_load_file( dataset=\"dataset\", table=\"test_table\", path=\"path\", gcp_credentials=gcp_credentials ) return result example_bigquery_load_file_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Loading into %s . %s from file\" , dataset , table ) if not os . path . exists ( path ): raise ValueError ( f \" { path } does not exist\" ) elif not os . path . isfile ( path ): raise ValueError ( f \" { path } is not a file\" ) client = gcp_credentials . get_bigquery_client ( project = project ) table_ref = client . dataset ( dataset ) . table ( table ) job_config = job_config or {} if \"autodetect\" not in job_config : job_config [ \"autodetect\" ] = True # TODO: test if autodetect is needed when schema is passed job_config = LoadJobConfig ( ** job_config ) if schema : # TODO: test if schema can be passed directly in job_config job_config . schema = schema try : with open ( path , \"rb\" ) as file_obj : partial_load = partial ( _result_sync , client . load_table_from_file , file_obj , table_ref , rewind = rewind , size = size , location = location , job_config = job_config , ) result = await to_thread . run_sync ( partial_load ) except IOError : logger . exception ( f \"Could not open and read from { path } \" ) raise if result is not None : # remove unpickleable attributes result . _client = None result . _completion_lock = None return result bigquery_query async Runs a BigQuery query. Parameters: Name Type Description Default query str String of the query to execute. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required query_params Optional [ List [ tuple ]] List of 3-tuples specifying BigQuery query parameters; currently only scalar query parameters are supported. See the Google documentation for more details on how both the query and the query parameters should be formatted. None dry_run_max_bytes Optional [ int ] If provided, the maximum number of bytes the query is allowed to process; this will be determined by executing a dry run and raising a ValueError if the maximum is exceeded. None dataset Optional [ str ] Name of a destination dataset to write the query results to, if you don't want them returned; if provided, table must also be provided. None table Optional [ str ] Name of a destination table to write the query results to, if you don't want them returned; if provided, dataset must also be provided. None to_dataframe bool If provided, returns the results of the query as a pandas dataframe instead of a list of bigquery.table.Row objects. False job_config Optional [ dict ] Dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). None project Optional [ str ] The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. None location str Location of the dataset that will be queried. 'US' Returns: Type Description List ['Row'] A list of rows, or pandas DataFrame if to_dataframe, List ['Row'] matching the query criteria. Example Queries the public names database, returning 10 results. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_query @flow def example_bigquery_query_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" , project = \"project\" ) query = ''' SELECT word, word_count FROM `bigquery-public-data.samples.shakespeare` WHERE corpus = @corpus AND word_count >= @min_word_count ORDER BY word_count DESC; ''' query_params = [ ( \"corpus\" , \"STRING\" , \"romeoandjuliet\" ), ( \"min_word_count\" , \"INT64\" , 250 ) ] result = bigquery_query ( query , gcp_credentials , query_params = query_params ) return result example_bigquery_query_flow () Source code in prefect_gcp/bigquery.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 @task async def bigquery_query ( query : str , gcp_credentials : \"GcpCredentials\" , query_params : Optional [ List [ tuple ]] = None , # 3-tuples dry_run_max_bytes : Optional [ int ] = None , dataset : Optional [ str ] = None , table : Optional [ str ] = None , to_dataframe : bool = False , job_config : Optional [ dict ] = None , project : Optional [ str ] = None , location : str = \"US\" , ) -> List [ \"Row\" ]: \"\"\" Runs a BigQuery query. Args: query: String of the query to execute. gcp_credentials: Credentials to use for authentication with GCP. query_params: List of 3-tuples specifying BigQuery query parameters; currently only scalar query parameters are supported. See the [Google documentation](https://cloud.google.com/bigquery/docs/parameterized-queries#bigquery-query-params-python) for more details on how both the query and the query parameters should be formatted. dry_run_max_bytes: If provided, the maximum number of bytes the query is allowed to process; this will be determined by executing a dry run and raising a `ValueError` if the maximum is exceeded. dataset: Name of a destination dataset to write the query results to, if you don't want them returned; if provided, `table` must also be provided. table: Name of a destination table to write the query results to, if you don't want them returned; if provided, `dataset` must also be provided. to_dataframe: If provided, returns the results of the query as a pandas dataframe instead of a list of `bigquery.table.Row` objects. job_config: Dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). project: The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. location: Location of the dataset that will be queried. Returns: A list of rows, or pandas DataFrame if to_dataframe, matching the query criteria. Example: Queries the public names database, returning 10 results. ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_query @flow def example_bigquery_query_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\", project=\"project\" ) query = ''' SELECT word, word_count FROM `bigquery-public-data.samples.shakespeare` WHERE corpus = @corpus AND word_count >= @min_word_count ORDER BY word_count DESC; ''' query_params = [ (\"corpus\", \"STRING\", \"romeoandjuliet\"), (\"min_word_count\", \"INT64\", 250) ] result = bigquery_query( query, gcp_credentials, query_params=query_params ) return result example_bigquery_query_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Running BigQuery query\" ) client = gcp_credentials . get_bigquery_client ( project = project , location = location ) # setup job config job_config = QueryJobConfig ( ** job_config or {}) if query_params is not None : job_config . query_parameters = [ ScalarQueryParameter ( * qp ) for qp in query_params ] # perform dry_run if requested if dry_run_max_bytes is not None : saved_info = dict ( dry_run = job_config . dry_run , use_query_cache = job_config . use_query_cache ) job_config . dry_run = True job_config . use_query_cache = False partial_query = partial ( client . query , query , job_config = job_config ) response = await to_thread . run_sync ( partial_query ) total_bytes_processed = response . total_bytes_processed if total_bytes_processed > dry_run_max_bytes : raise RuntimeError ( f \"Query will process { total_bytes_processed } bytes which is above \" f \"the set maximum of { dry_run_max_bytes } for this task.\" ) job_config . dry_run = saved_info [ \"dry_run\" ] job_config . use_query_cache = saved_info [ \"use_query_cache\" ] # if writing to a destination table if dataset is not None : table_ref = client . dataset ( dataset ) . table ( table ) job_config . destination = table_ref partial_query = partial ( _result_sync , client . query , query , job_config = job_config , ) result = await to_thread . run_sync ( partial_query ) if to_dataframe : return result . to_dataframe () else : return list ( result )","title":"BigQuery"},{"location":"bigquery/#prefect_gcp.bigquery","text":"Tasks for interacting with GCP BigQuery","title":"bigquery"},{"location":"bigquery/#prefect_gcp.bigquery.bigquery_create_table","text":"Creates table in BigQuery. Parameters: Name Type Description Default dataset str Name of a dataset in that the table will be created. required table str Name of a table to create. required schema List [ SchemaField ] Schema to use when creating the table. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required clustering_fields List [ str ] List of fields to cluster the table by. None time_partitioning TimePartitioning bigquery.TimePartitioning object specifying a partitioning of the newly created table None project Optional [ str ] Project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. None location str location of the dataset that will be written to. 'US' Returns: Type Description str Table name. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_create_table from google.cloud.bigquery import SchemaField @flow def example_bigquery_create_table_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) schema = [ SchemaField ( \"number\" , field_type = \"INTEGER\" , mode = \"REQUIRED\" ), SchemaField ( \"text\" , field_type = \"STRING\" , mode = \"REQUIRED\" ), SchemaField ( \"bool\" , field_type = \"BOOLEAN\" ) ] result = bigquery_create_table ( dataset = \"dataset\" , table = \"test_table\" , schema = schema , gcp_credentials = gcp_credentials ) return result example_bigquery_create_table_flow () Source code in prefect_gcp/bigquery.py 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 @task async def bigquery_create_table ( dataset : str , table : str , schema : List [ SchemaField ], gcp_credentials : \"GcpCredentials\" , clustering_fields : List [ str ] = None , time_partitioning : TimePartitioning = None , project : Optional [ str ] = None , location : str = \"US\" , ) -> str : \"\"\" Creates table in BigQuery. Args: dataset: Name of a dataset in that the table will be created. table: Name of a table to create. schema: Schema to use when creating the table. gcp_credentials: Credentials to use for authentication with GCP. clustering_fields: List of fields to cluster the table by. time_partitioning: `bigquery.TimePartitioning` object specifying a partitioning of the newly created table project: Project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. location: location of the dataset that will be written to. Returns: Table name. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_create_table from google.cloud.bigquery import SchemaField @flow def example_bigquery_create_table_flow(): gcp_credentials = GcpCredentials(project=\"project\") schema = [ SchemaField(\"number\", field_type=\"INTEGER\", mode=\"REQUIRED\"), SchemaField(\"text\", field_type=\"STRING\", mode=\"REQUIRED\"), SchemaField(\"bool\", field_type=\"BOOLEAN\") ] result = bigquery_create_table( dataset=\"dataset\", table=\"test_table\", schema=schema, gcp_credentials=gcp_credentials ) return result example_bigquery_create_table_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Creating %s . %s \" , dataset , table ) client = gcp_credentials . get_bigquery_client ( project = project , location = location ) try : partial_get_dataset = partial ( client . get_dataset , dataset ) dataset_ref = await to_thread . run_sync ( partial_get_dataset ) except NotFound : logger . debug ( \"Dataset %s not found, creating\" , dataset ) partial_create_dataset = partial ( client . create_dataset , dataset ) dataset_ref = await to_thread . run_sync ( partial_create_dataset ) table_ref = dataset_ref . table ( table ) try : partial_get_table = partial ( client . get_table , table_ref ) await to_thread . run_sync ( partial_get_table ) logger . info ( \" %s . %s already exists\" , dataset , table ) except NotFound : logger . debug ( \"Table %s not found, creating\" , table ) table_obj = Table ( table_ref , schema = schema ) # cluster for optimal data sorting/access if clustering_fields : table_obj . clustering_fields = clustering_fields # partitioning if time_partitioning : table_obj . time_partitioning = time_partitioning partial_create_table = partial ( client . create_table , table_obj ) await to_thread . run_sync ( partial_create_table ) return table","title":"bigquery_create_table()"},{"location":"bigquery/#prefect_gcp.bigquery.bigquery_insert_stream","text":"Insert records in a Google BigQuery table via the streaming API . Parameters: Name Type Description Default dataset str Name of a dataset where the records will be written to. required table str Name of a table to write to. required records List [ dict ] The list of records to insert as rows into the BigQuery table; each item in the list should be a dictionary whose keys correspond to columns in the table. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required project Optional [ str ] The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. None location str Location of the dataset that will be written to. 'US' Returns: Type Description List List of inserted rows. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_insert_stream from google.cloud.bigquery import SchemaField @flow def example_bigquery_insert_stream_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) records = [ { \"number\" : 1 , \"text\" : \"abc\" , \"bool\" : True }, { \"number\" : 2 , \"text\" : \"def\" , \"bool\" : False }, ] result = bigquery_insert_stream ( dataset = \"integrations\" , table = \"test_table\" , records = records , gcp_credentials = gcp_credentials ) return result example_bigquery_insert_stream_flow () Source code in prefect_gcp/bigquery.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 @task async def bigquery_insert_stream ( dataset : str , table : str , records : List [ dict ], gcp_credentials : \"GcpCredentials\" , project : Optional [ str ] = None , location : str = \"US\" , ) -> List : \"\"\" Insert records in a Google BigQuery table via the [streaming API](https://cloud.google.com/bigquery/streaming-data-into-bigquery). Args: dataset: Name of a dataset where the records will be written to. table: Name of a table to write to. records: The list of records to insert as rows into the BigQuery table; each item in the list should be a dictionary whose keys correspond to columns in the table. gcp_credentials: Credentials to use for authentication with GCP. project: The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. location: Location of the dataset that will be written to. Returns: List of inserted rows. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_insert_stream from google.cloud.bigquery import SchemaField @flow def example_bigquery_insert_stream_flow(): gcp_credentials = GcpCredentials(project=\"project\") records = [ {\"number\": 1, \"text\": \"abc\", \"bool\": True}, {\"number\": 2, \"text\": \"def\", \"bool\": False}, ] result = bigquery_insert_stream( dataset=\"integrations\", table=\"test_table\", records=records, gcp_credentials=gcp_credentials ) return result example_bigquery_insert_stream_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Inserting into %s . %s as a stream\" , dataset , table ) client = gcp_credentials . get_bigquery_client ( project = project , location = location ) table_ref = client . dataset ( dataset ) . table ( table ) partial_insert = partial ( client . insert_rows_json , table = table_ref , json_rows = records ) response = await to_thread . run_sync ( partial_insert ) errors = [] output = [] for row in response : output . append ( row ) if \"errors\" in row : errors . append ( row [ \"errors\" ]) if errors : raise ValueError ( errors ) return output","title":"bigquery_insert_stream()"},{"location":"bigquery/#prefect_gcp.bigquery.bigquery_load_cloud_storage","text":"Run method for this Task. Invoked by calling this Task within a Flow context, after initialization. Parameters: Name Type Description Default uri str GCS path to load data from. required dataset str The id of a destination dataset to write the records to. required table str The name of a destination table to write the records to. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required schema Optional [ List [ SchemaField ]] The schema to use when creating the table. None job_config Optional [ dict ] Dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). None project Optional [ str ] The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. None location str Location of the dataset that will be written to. 'US' Returns: Type Description LoadJob The response from load_table_from_uri . Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_load_cloud_storage @flow def example_bigquery_load_cloud_storage_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) result = bigquery_load_cloud_storage ( dataset = \"dataset\" , table = \"test_table\" , uri = \"uri\" , gcp_credentials = gcp_credentials ) return result example_bigquery_load_cloud_storage_flow () Source code in prefect_gcp/bigquery.py 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 @task async def bigquery_load_cloud_storage ( dataset : str , table : str , uri : str , gcp_credentials : \"GcpCredentials\" , schema : Optional [ List [ SchemaField ]] = None , job_config : Optional [ dict ] = None , project : Optional [ str ] = None , location : str = \"US\" , ) -> LoadJob : \"\"\" Run method for this Task. Invoked by _calling_ this Task within a Flow context, after initialization. Args: uri: GCS path to load data from. dataset: The id of a destination dataset to write the records to. table: The name of a destination table to write the records to. gcp_credentials: Credentials to use for authentication with GCP. schema: The schema to use when creating the table. job_config: Dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). project: The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. location: Location of the dataset that will be written to. Returns: The response from `load_table_from_uri`. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_load_cloud_storage @flow def example_bigquery_load_cloud_storage_flow(): gcp_credentials = GcpCredentials(project=\"project\") result = bigquery_load_cloud_storage( dataset=\"dataset\", table=\"test_table\", uri=\"uri\", gcp_credentials=gcp_credentials ) return result example_bigquery_load_cloud_storage_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Loading into %s . %s from cloud storage\" , dataset , table ) client = gcp_credentials . get_bigquery_client ( project = project , location = location ) table_ref = client . dataset ( dataset ) . table ( table ) job_config = job_config or {} if \"autodetect\" not in job_config : job_config [ \"autodetect\" ] = True job_config = LoadJobConfig ( ** job_config ) if schema : job_config . schema = schema result = None try : partial_load = partial ( _result_sync , client . load_table_from_uri , uri , table_ref , job_config = job_config , ) result = await to_thread . run_sync ( partial_load ) except Exception as exception : logger . exception ( exception ) if result is not None and result . errors is not None : for error in result . errors : logger . exception ( error ) raise if result is not None : # remove unpickleable attributes result . _client = None result . _completion_lock = None return result","title":"bigquery_load_cloud_storage()"},{"location":"bigquery/#prefect_gcp.bigquery.bigquery_load_file","text":"Loads file into BigQuery. Parameters: Name Type Description Default dataset str ID of a destination dataset to write the records to; if not provided here, will default to the one provided at initialization. required table str Name of a destination table to write the records to; if not provided here, will default to the one provided at initialization. required path Union [ str , Path ] A string or path-like object of the file to be loaded. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required schema Optional [ List [ SchemaField ]] Schema to use when creating the table. None job_config Optional [ dict ] An optional dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). None rewind bool if True, seek to the beginning of the file handle before reading the file. False size Optional [ int ] Number of bytes to read from the file handle. If size is None or large, resumable upload will be used. Otherwise, multipart upload will be used. None project Optional [ str ] Project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. None location str location of the dataset that will be written to. 'US' Returns: Type Description LoadJob The response from load_table_from_file . Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_load_file from google.cloud.bigquery import SchemaField @flow def example_bigquery_load_file_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) result = bigquery_load_file ( dataset = \"dataset\" , table = \"test_table\" , path = \"path\" , gcp_credentials = gcp_credentials ) return result example_bigquery_load_file_flow () Source code in prefect_gcp/bigquery.py 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 @task async def bigquery_load_file ( dataset : str , table : str , path : Union [ str , Path ], gcp_credentials : \"GcpCredentials\" , schema : Optional [ List [ SchemaField ]] = None , job_config : Optional [ dict ] = None , rewind : bool = False , size : Optional [ int ] = None , project : Optional [ str ] = None , location : str = \"US\" , ) -> LoadJob : \"\"\" Loads file into BigQuery. Args: dataset: ID of a destination dataset to write the records to; if not provided here, will default to the one provided at initialization. table: Name of a destination table to write the records to; if not provided here, will default to the one provided at initialization. path: A string or path-like object of the file to be loaded. gcp_credentials: Credentials to use for authentication with GCP. schema: Schema to use when creating the table. job_config: An optional dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). rewind: if True, seek to the beginning of the file handle before reading the file. size: Number of bytes to read from the file handle. If size is None or large, resumable upload will be used. Otherwise, multipart upload will be used. project: Project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. location: location of the dataset that will be written to. Returns: The response from `load_table_from_file`. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_load_file from google.cloud.bigquery import SchemaField @flow def example_bigquery_load_file_flow(): gcp_credentials = GcpCredentials(project=\"project\") result = bigquery_load_file( dataset=\"dataset\", table=\"test_table\", path=\"path\", gcp_credentials=gcp_credentials ) return result example_bigquery_load_file_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Loading into %s . %s from file\" , dataset , table ) if not os . path . exists ( path ): raise ValueError ( f \" { path } does not exist\" ) elif not os . path . isfile ( path ): raise ValueError ( f \" { path } is not a file\" ) client = gcp_credentials . get_bigquery_client ( project = project ) table_ref = client . dataset ( dataset ) . table ( table ) job_config = job_config or {} if \"autodetect\" not in job_config : job_config [ \"autodetect\" ] = True # TODO: test if autodetect is needed when schema is passed job_config = LoadJobConfig ( ** job_config ) if schema : # TODO: test if schema can be passed directly in job_config job_config . schema = schema try : with open ( path , \"rb\" ) as file_obj : partial_load = partial ( _result_sync , client . load_table_from_file , file_obj , table_ref , rewind = rewind , size = size , location = location , job_config = job_config , ) result = await to_thread . run_sync ( partial_load ) except IOError : logger . exception ( f \"Could not open and read from { path } \" ) raise if result is not None : # remove unpickleable attributes result . _client = None result . _completion_lock = None return result","title":"bigquery_load_file()"},{"location":"bigquery/#prefect_gcp.bigquery.bigquery_query","text":"Runs a BigQuery query. Parameters: Name Type Description Default query str String of the query to execute. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required query_params Optional [ List [ tuple ]] List of 3-tuples specifying BigQuery query parameters; currently only scalar query parameters are supported. See the Google documentation for more details on how both the query and the query parameters should be formatted. None dry_run_max_bytes Optional [ int ] If provided, the maximum number of bytes the query is allowed to process; this will be determined by executing a dry run and raising a ValueError if the maximum is exceeded. None dataset Optional [ str ] Name of a destination dataset to write the query results to, if you don't want them returned; if provided, table must also be provided. None table Optional [ str ] Name of a destination table to write the query results to, if you don't want them returned; if provided, dataset must also be provided. None to_dataframe bool If provided, returns the results of the query as a pandas dataframe instead of a list of bigquery.table.Row objects. False job_config Optional [ dict ] Dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). None project Optional [ str ] The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. None location str Location of the dataset that will be queried. 'US' Returns: Type Description List ['Row'] A list of rows, or pandas DataFrame if to_dataframe, List ['Row'] matching the query criteria. Example Queries the public names database, returning 10 results. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_query @flow def example_bigquery_query_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" , project = \"project\" ) query = ''' SELECT word, word_count FROM `bigquery-public-data.samples.shakespeare` WHERE corpus = @corpus AND word_count >= @min_word_count ORDER BY word_count DESC; ''' query_params = [ ( \"corpus\" , \"STRING\" , \"romeoandjuliet\" ), ( \"min_word_count\" , \"INT64\" , 250 ) ] result = bigquery_query ( query , gcp_credentials , query_params = query_params ) return result example_bigquery_query_flow () Source code in prefect_gcp/bigquery.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 @task async def bigquery_query ( query : str , gcp_credentials : \"GcpCredentials\" , query_params : Optional [ List [ tuple ]] = None , # 3-tuples dry_run_max_bytes : Optional [ int ] = None , dataset : Optional [ str ] = None , table : Optional [ str ] = None , to_dataframe : bool = False , job_config : Optional [ dict ] = None , project : Optional [ str ] = None , location : str = \"US\" , ) -> List [ \"Row\" ]: \"\"\" Runs a BigQuery query. Args: query: String of the query to execute. gcp_credentials: Credentials to use for authentication with GCP. query_params: List of 3-tuples specifying BigQuery query parameters; currently only scalar query parameters are supported. See the [Google documentation](https://cloud.google.com/bigquery/docs/parameterized-queries#bigquery-query-params-python) for more details on how both the query and the query parameters should be formatted. dry_run_max_bytes: If provided, the maximum number of bytes the query is allowed to process; this will be determined by executing a dry run and raising a `ValueError` if the maximum is exceeded. dataset: Name of a destination dataset to write the query results to, if you don't want them returned; if provided, `table` must also be provided. table: Name of a destination table to write the query results to, if you don't want them returned; if provided, `dataset` must also be provided. to_dataframe: If provided, returns the results of the query as a pandas dataframe instead of a list of `bigquery.table.Row` objects. job_config: Dictionary of job configuration parameters; note that the parameters provided here must be pickleable (e.g., dataset references will be rejected). project: The project to initialize the BigQuery Client with; if not provided, will default to the one inferred from your credentials. location: Location of the dataset that will be queried. Returns: A list of rows, or pandas DataFrame if to_dataframe, matching the query criteria. Example: Queries the public names database, returning 10 results. ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.bigquery import bigquery_query @flow def example_bigquery_query_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\", project=\"project\" ) query = ''' SELECT word, word_count FROM `bigquery-public-data.samples.shakespeare` WHERE corpus = @corpus AND word_count >= @min_word_count ORDER BY word_count DESC; ''' query_params = [ (\"corpus\", \"STRING\", \"romeoandjuliet\"), (\"min_word_count\", \"INT64\", 250) ] result = bigquery_query( query, gcp_credentials, query_params=query_params ) return result example_bigquery_query_flow() ``` \"\"\" # noqa logger = get_run_logger () logger . info ( \"Running BigQuery query\" ) client = gcp_credentials . get_bigquery_client ( project = project , location = location ) # setup job config job_config = QueryJobConfig ( ** job_config or {}) if query_params is not None : job_config . query_parameters = [ ScalarQueryParameter ( * qp ) for qp in query_params ] # perform dry_run if requested if dry_run_max_bytes is not None : saved_info = dict ( dry_run = job_config . dry_run , use_query_cache = job_config . use_query_cache ) job_config . dry_run = True job_config . use_query_cache = False partial_query = partial ( client . query , query , job_config = job_config ) response = await to_thread . run_sync ( partial_query ) total_bytes_processed = response . total_bytes_processed if total_bytes_processed > dry_run_max_bytes : raise RuntimeError ( f \"Query will process { total_bytes_processed } bytes which is above \" f \"the set maximum of { dry_run_max_bytes } for this task.\" ) job_config . dry_run = saved_info [ \"dry_run\" ] job_config . use_query_cache = saved_info [ \"use_query_cache\" ] # if writing to a destination table if dataset is not None : table_ref = client . dataset ( dataset ) . table ( table ) job_config . destination = table_ref partial_query = partial ( _result_sync , client . query , query , job_config = job_config , ) result = await to_thread . run_sync ( partial_query ) if to_dataframe : return result . to_dataframe () else : return list ( result )","title":"bigquery_query()"},{"location":"cloud_storage/","text":"prefect_gcp.cloud_storage Tasks for interacting with GCP Cloud Storage cloud_storage_copy_blob async Copies data from one Google Cloud Storage bucket to another, without downloading it locally. Parameters: Name Type Description Default source_bucket str Source bucket name. required dest_bucket str Destination bucket name. required source_blob str Source blob name. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required dest_blob Optional [ str ] Destination blob name; if not provided, defaults to source_blob. None timeout Union [ float , Tuple [ float , float ]] The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str Destination blob name. Example Copies blob from one bucket to another. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_copy_blob @flow () def example_cloud_storage_copy_blob_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) blob = cloud_storage_copy_blob ( \"source_bucket\" , \"dest_bucket\" , \"source_blob\" , gcp_credentials ) return blob example_cloud_storage_copy_blob_flow () Source code in prefect_gcp/cloud_storage.py 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 @task async def cloud_storage_copy_blob ( source_bucket : str , dest_bucket : str , source_blob : str , gcp_credentials : \"GcpCredentials\" , dest_blob : Optional [ str ] = None , timeout : Union [ float , Tuple [ float , float ]] = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Copies data from one Google Cloud Storage bucket to another, without downloading it locally. Args: source_bucket: Source bucket name. dest_bucket: Destination bucket name. source_blob: Source blob name. gcp_credentials: Credentials to use for authentication with GCP. dest_blob: Destination blob name; if not provided, defaults to source_blob. timeout: The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: Destination blob name. Example: Copies blob from one bucket to another. ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_copy_blob @flow() def example_cloud_storage_copy_blob_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") blob = cloud_storage_copy_blob( \"source_bucket\", \"dest_bucket\", \"source_blob\", gcp_credentials ) return blob example_cloud_storage_copy_blob_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Copying blob named %s from the %s bucket to the %s bucket\" , source_blob , source_bucket , dest_bucket , ) source_bucket_obj = await _get_bucket ( source_bucket , gcp_credentials , project = project ) dest_bucket_obj = await _get_bucket ( dest_bucket , gcp_credentials , project = project ) if dest_blob is None : dest_blob = source_blob source_blob_obj = source_bucket_obj . blob ( source_blob ) partial_copy_blob = partial ( source_bucket_obj . copy_blob , blob = source_blob_obj , destination_bucket = dest_bucket_obj , new_name = dest_blob , timeout = timeout , ) await to_thread . run_sync ( partial_copy_blob ) return dest_blob cloud_storage_create_bucket async Creates a bucket. Parameters: Name Type Description Default bucket str Name of the bucket. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None location Optional [ str ] Location of the bucket. None Returns: Type Description str The bucket name. Example Creates a bucket named \"prefect\". from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_create_bucket @flow () def example_cloud_storage_create_bucket_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) bucket = cloud_storage_create_bucket ( \"prefect\" , gcp_credentials ) example_cloud_storage_create_bucket_flow () Source code in prefect_gcp/cloud_storage.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 @task async def cloud_storage_create_bucket ( bucket : str , gcp_credentials : \"GcpCredentials\" , project : Optional [ str ] = None , location : Optional [ str ] = None , ) -> str : \"\"\" Creates a bucket. Args: bucket: Name of the bucket. gcp_credentials: Credentials to use for authentication with GCP. project: Name of the project to use; overrides the gcp_credentials project if provided. location: Location of the bucket. Returns: The bucket name. Example: Creates a bucket named \"prefect\". ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_create_bucket @flow() def example_cloud_storage_create_bucket_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") bucket = cloud_storage_create_bucket(\"prefect\", gcp_credentials) example_cloud_storage_create_bucket_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Creating %s bucket\" , bucket ) client = gcp_credentials . get_cloud_storage_client ( project = project ) partial_create_bucket = partial ( client . create_bucket , bucket , location = location ) await to_thread . run_sync ( partial_create_bucket ) return bucket cloud_storage_download_blob_as_bytes async Downloads a blob as bytes. Parameters: Name Type Description Default bucket str Name of the bucket. required blob str Name of the Cloud Storage blob. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required path If provided, downloads the contents to the provided file path; if the path is a directory, automatically joins the blob name. required chunk_size int The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. None encryption_key Optional [ str ] An encryption key. None timeout Union [ float , Tuple [ float , float ]] The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description bytes A bytes or string representation of the blob object. Example Downloads blob from bucket. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_download_blob @flow () def example_cloud_storage_download_blob_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) contents = cloud_storage_download_blob ( \"bucket\" , \"blob\" , gcp_credentials ) return contents example_cloud_storage_download_blob_flow () Source code in prefect_gcp/cloud_storage.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 @task async def cloud_storage_download_blob_as_bytes ( bucket : str , blob : str , gcp_credentials : \"GcpCredentials\" , chunk_size : Optional [ int ] = None , encryption_key : Optional [ str ] = None , timeout : Union [ float , Tuple [ float , float ]] = 60 , project : Optional [ str ] = None , ) -> bytes : \"\"\" Downloads a blob as bytes. Args: bucket: Name of the bucket. blob: Name of the Cloud Storage blob. gcp_credentials: Credentials to use for authentication with GCP. path: If provided, downloads the contents to the provided file path; if the path is a directory, automatically joins the blob name. chunk_size (int, optional): The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. encryption_key: An encryption key. timeout: The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: A bytes or string representation of the blob object. Example: Downloads blob from bucket. ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_download_blob @flow() def example_cloud_storage_download_blob_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") contents = cloud_storage_download_blob(\"bucket\", \"blob\", gcp_credentials) return contents example_cloud_storage_download_blob_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Downloading blob named %s from the %s bucket\" , blob , bucket ) bucket_obj = await _get_bucket ( bucket , gcp_credentials , project = project ) blob_obj = bucket_obj . blob ( blob , chunk_size = chunk_size , encryption_key = encryption_key ) partial_download = partial ( blob_obj . download_as_bytes , timeout = timeout ) contents = await to_thread . run_sync ( partial_download ) return contents cloud_storage_download_blob_to_file async Downloads a blob to a file path. Parameters: Name Type Description Default bucket str Name of the bucket. required blob str Name of the Cloud Storage blob. required path Union [ str , Path ] Downloads the contents to the provided file path; if the path is a directory, automatically joins the blob name. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required chunk_size int The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. None encryption_key Optional [ str ] An encryption key. None timeout Union [ float , Tuple [ float , float ]] The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description Union [ str , Path ] The path to the blob object. Example Downloads blob from bucket. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_download_blob @flow () def example_cloud_storage_download_blob_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) path = cloud_storage_download_blob ( \"bucket\" , \"blob\" , \"data_path\" , gcp_credentials ) return path example_cloud_storage_download_blob_flow () Source code in prefect_gcp/cloud_storage.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 @task async def cloud_storage_download_blob_to_file ( bucket : str , blob : str , path : Union [ str , Path ], gcp_credentials : \"GcpCredentials\" , chunk_size : Optional [ int ] = None , encryption_key : Optional [ str ] = None , timeout : Union [ float , Tuple [ float , float ]] = 60 , project : Optional [ str ] = None , ) -> Union [ str , Path ]: \"\"\" Downloads a blob to a file path. Args: bucket: Name of the bucket. blob: Name of the Cloud Storage blob. path: Downloads the contents to the provided file path; if the path is a directory, automatically joins the blob name. gcp_credentials: Credentials to use for authentication with GCP. chunk_size (int, optional): The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. encryption_key: An encryption key. timeout: The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The path to the blob object. Example: Downloads blob from bucket. ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_download_blob @flow() def example_cloud_storage_download_blob_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") path = cloud_storage_download_blob( \"bucket\", \"blob\", \"data_path\", gcp_credentials) return path example_cloud_storage_download_blob_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Downloading blob named %s from the %s bucket to %s \" , blob , bucket , path ) bucket_obj = await _get_bucket ( bucket , gcp_credentials , project = project ) blob_obj = bucket_obj . blob ( blob , chunk_size = chunk_size , encryption_key = encryption_key ) if os . path . isdir ( path ): if isinstance ( path , Path ): path = path . joinpath ( blob ) # keep as Path if Path is passed else : path = os . path . join ( path , blob ) # keep as str if a str is passed partial_download = partial ( blob_obj . download_to_filename , path , timeout = timeout ) await to_thread . run_sync ( partial_download ) return path cloud_storage_upload_blob_from_file async Uploads a blob from file path or file-like object. Usage for passing in file-like object is if the data was downloaded from the web; can bypass writing to disk and directly upload to Cloud Storage. Parameters: Name Type Description Default file Union [ str , Path , BytesIO ] Path to data or file like object to upload. required bucket str Name of the bucket. required blob str Name of the Cloud Storage blob. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required chunk_size int The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. None encryption_key Optional [ str ] An encryption key. None timeout Union [ float , Tuple [ float , float ]] The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The blob name. Example Uploads blob to bucket. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_upload_blob_from_file @flow() def example_cloud_storage_upload_blob_from_file_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") blob = cloud_storage_upload_blob_from_file( \"/path/somewhere\", \"bucket\", \"blob\", gcp_credentials) return blob example_cloud_storage_upload_blob_from_file_flow() Source code in prefect_gcp/cloud_storage.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 @task async def cloud_storage_upload_blob_from_file ( file : Union [ str , Path , BytesIO ], bucket : str , blob : str , gcp_credentials : \"GcpCredentials\" , chunk_size : Optional [ int ] = None , encryption_key : Optional [ str ] = None , timeout : Union [ float , Tuple [ float , float ]] = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Uploads a blob from file path or file-like object. Usage for passing in file-like object is if the data was downloaded from the web; can bypass writing to disk and directly upload to Cloud Storage. Args: file: Path to data or file like object to upload. bucket: Name of the bucket. blob: Name of the Cloud Storage blob. gcp_credentials: Credentials to use for authentication with GCP. chunk_size (int, optional): The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. encryption_key: An encryption key. timeout: The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The blob name. Example: Uploads blob to bucket. ``` from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_upload_blob_from_file @flow() def example_cloud_storage_upload_blob_from_file_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") blob = cloud_storage_upload_blob_from_file( \"/path/somewhere\", \"bucket\", \"blob\", gcp_credentials) return blob example_cloud_storage_upload_blob_from_file_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Uploading blob named %s to the %s bucket\" , blob , bucket ) bucket_obj = await _get_bucket ( bucket , gcp_credentials , project = project ) blob_obj = bucket_obj . blob ( blob , chunk_size = chunk_size , encryption_key = encryption_key ) if isinstance ( file , BytesIO ): partial_upload = partial ( blob_obj . upload_from_file , file , timeout = timeout ) else : partial_upload = partial ( blob_obj . upload_from_filename , file , timeout = timeout ) await to_thread . run_sync ( partial_upload ) return blob cloud_storage_upload_blob_from_string async Uploads a blob from a string or bytes representation of data. Parameters: Name Type Description Default data Union [ str , bytes ] String or bytes representation of data to upload. required bucket str Name of the bucket. required blob str Name of the Cloud Storage blob. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required content_type Optional [ str ] Type of content being uploaded. None chunk_size int The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. None encryption_key Optional [ str ] An encryption key. None timeout Union [ float , Tuple [ float , float ]] The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The blob name. Example Uploads blob to bucket. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_upload_blob_from_string @flow () def example_cloud_storage_upload_blob_from_string_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) blob = cloud_storage_upload_blob_from_string ( \"data\" , \"bucket\" , \"blob\" , gcp_credentials ) return blob example_cloud_storage_upload_blob_from_string_flow () Source code in prefect_gcp/cloud_storage.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 @task async def cloud_storage_upload_blob_from_string ( data : Union [ str , bytes ], bucket : str , blob : str , gcp_credentials : \"GcpCredentials\" , content_type : Optional [ str ] = None , chunk_size : Optional [ int ] = None , encryption_key : Optional [ str ] = None , timeout : Union [ float , Tuple [ float , float ]] = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Uploads a blob from a string or bytes representation of data. Args: data: String or bytes representation of data to upload. bucket: Name of the bucket. blob: Name of the Cloud Storage blob. gcp_credentials: Credentials to use for authentication with GCP. content_type: Type of content being uploaded. chunk_size (int, optional): The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. encryption_key: An encryption key. timeout: The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The blob name. Example: Uploads blob to bucket. ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_upload_blob_from_string @flow() def example_cloud_storage_upload_blob_from_string_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") blob = cloud_storage_upload_blob_from_string( \"data\", \"bucket\", \"blob\", gcp_credentials) return blob example_cloud_storage_upload_blob_from_string_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Uploading blob named %s to the %s bucket\" , blob , bucket ) bucket_obj = await _get_bucket ( bucket , gcp_credentials , project = project ) blob_obj = bucket_obj . blob ( blob , chunk_size = chunk_size , encryption_key = encryption_key ) partial_upload = partial ( blob_obj . upload_from_string , data , content_type = content_type , timeout = timeout ) await to_thread . run_sync ( partial_upload ) return blob","title":"Cloud Storage"},{"location":"cloud_storage/#prefect_gcp.cloud_storage","text":"Tasks for interacting with GCP Cloud Storage","title":"cloud_storage"},{"location":"cloud_storage/#prefect_gcp.cloud_storage.cloud_storage_copy_blob","text":"Copies data from one Google Cloud Storage bucket to another, without downloading it locally. Parameters: Name Type Description Default source_bucket str Source bucket name. required dest_bucket str Destination bucket name. required source_blob str Source blob name. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required dest_blob Optional [ str ] Destination blob name; if not provided, defaults to source_blob. None timeout Union [ float , Tuple [ float , float ]] The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str Destination blob name. Example Copies blob from one bucket to another. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_copy_blob @flow () def example_cloud_storage_copy_blob_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) blob = cloud_storage_copy_blob ( \"source_bucket\" , \"dest_bucket\" , \"source_blob\" , gcp_credentials ) return blob example_cloud_storage_copy_blob_flow () Source code in prefect_gcp/cloud_storage.py 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 @task async def cloud_storage_copy_blob ( source_bucket : str , dest_bucket : str , source_blob : str , gcp_credentials : \"GcpCredentials\" , dest_blob : Optional [ str ] = None , timeout : Union [ float , Tuple [ float , float ]] = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Copies data from one Google Cloud Storage bucket to another, without downloading it locally. Args: source_bucket: Source bucket name. dest_bucket: Destination bucket name. source_blob: Source blob name. gcp_credentials: Credentials to use for authentication with GCP. dest_blob: Destination blob name; if not provided, defaults to source_blob. timeout: The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: Destination blob name. Example: Copies blob from one bucket to another. ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_copy_blob @flow() def example_cloud_storage_copy_blob_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") blob = cloud_storage_copy_blob( \"source_bucket\", \"dest_bucket\", \"source_blob\", gcp_credentials ) return blob example_cloud_storage_copy_blob_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Copying blob named %s from the %s bucket to the %s bucket\" , source_blob , source_bucket , dest_bucket , ) source_bucket_obj = await _get_bucket ( source_bucket , gcp_credentials , project = project ) dest_bucket_obj = await _get_bucket ( dest_bucket , gcp_credentials , project = project ) if dest_blob is None : dest_blob = source_blob source_blob_obj = source_bucket_obj . blob ( source_blob ) partial_copy_blob = partial ( source_bucket_obj . copy_blob , blob = source_blob_obj , destination_bucket = dest_bucket_obj , new_name = dest_blob , timeout = timeout , ) await to_thread . run_sync ( partial_copy_blob ) return dest_blob","title":"cloud_storage_copy_blob()"},{"location":"cloud_storage/#prefect_gcp.cloud_storage.cloud_storage_create_bucket","text":"Creates a bucket. Parameters: Name Type Description Default bucket str Name of the bucket. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None location Optional [ str ] Location of the bucket. None Returns: Type Description str The bucket name. Example Creates a bucket named \"prefect\". from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_create_bucket @flow () def example_cloud_storage_create_bucket_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) bucket = cloud_storage_create_bucket ( \"prefect\" , gcp_credentials ) example_cloud_storage_create_bucket_flow () Source code in prefect_gcp/cloud_storage.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 @task async def cloud_storage_create_bucket ( bucket : str , gcp_credentials : \"GcpCredentials\" , project : Optional [ str ] = None , location : Optional [ str ] = None , ) -> str : \"\"\" Creates a bucket. Args: bucket: Name of the bucket. gcp_credentials: Credentials to use for authentication with GCP. project: Name of the project to use; overrides the gcp_credentials project if provided. location: Location of the bucket. Returns: The bucket name. Example: Creates a bucket named \"prefect\". ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_create_bucket @flow() def example_cloud_storage_create_bucket_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") bucket = cloud_storage_create_bucket(\"prefect\", gcp_credentials) example_cloud_storage_create_bucket_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Creating %s bucket\" , bucket ) client = gcp_credentials . get_cloud_storage_client ( project = project ) partial_create_bucket = partial ( client . create_bucket , bucket , location = location ) await to_thread . run_sync ( partial_create_bucket ) return bucket","title":"cloud_storage_create_bucket()"},{"location":"cloud_storage/#prefect_gcp.cloud_storage.cloud_storage_download_blob_as_bytes","text":"Downloads a blob as bytes. Parameters: Name Type Description Default bucket str Name of the bucket. required blob str Name of the Cloud Storage blob. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required path If provided, downloads the contents to the provided file path; if the path is a directory, automatically joins the blob name. required chunk_size int The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. None encryption_key Optional [ str ] An encryption key. None timeout Union [ float , Tuple [ float , float ]] The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description bytes A bytes or string representation of the blob object. Example Downloads blob from bucket. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_download_blob @flow () def example_cloud_storage_download_blob_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) contents = cloud_storage_download_blob ( \"bucket\" , \"blob\" , gcp_credentials ) return contents example_cloud_storage_download_blob_flow () Source code in prefect_gcp/cloud_storage.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 @task async def cloud_storage_download_blob_as_bytes ( bucket : str , blob : str , gcp_credentials : \"GcpCredentials\" , chunk_size : Optional [ int ] = None , encryption_key : Optional [ str ] = None , timeout : Union [ float , Tuple [ float , float ]] = 60 , project : Optional [ str ] = None , ) -> bytes : \"\"\" Downloads a blob as bytes. Args: bucket: Name of the bucket. blob: Name of the Cloud Storage blob. gcp_credentials: Credentials to use for authentication with GCP. path: If provided, downloads the contents to the provided file path; if the path is a directory, automatically joins the blob name. chunk_size (int, optional): The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. encryption_key: An encryption key. timeout: The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: A bytes or string representation of the blob object. Example: Downloads blob from bucket. ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_download_blob @flow() def example_cloud_storage_download_blob_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") contents = cloud_storage_download_blob(\"bucket\", \"blob\", gcp_credentials) return contents example_cloud_storage_download_blob_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Downloading blob named %s from the %s bucket\" , blob , bucket ) bucket_obj = await _get_bucket ( bucket , gcp_credentials , project = project ) blob_obj = bucket_obj . blob ( blob , chunk_size = chunk_size , encryption_key = encryption_key ) partial_download = partial ( blob_obj . download_as_bytes , timeout = timeout ) contents = await to_thread . run_sync ( partial_download ) return contents","title":"cloud_storage_download_blob_as_bytes()"},{"location":"cloud_storage/#prefect_gcp.cloud_storage.cloud_storage_download_blob_to_file","text":"Downloads a blob to a file path. Parameters: Name Type Description Default bucket str Name of the bucket. required blob str Name of the Cloud Storage blob. required path Union [ str , Path ] Downloads the contents to the provided file path; if the path is a directory, automatically joins the blob name. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required chunk_size int The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. None encryption_key Optional [ str ] An encryption key. None timeout Union [ float , Tuple [ float , float ]] The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description Union [ str , Path ] The path to the blob object. Example Downloads blob from bucket. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_download_blob @flow () def example_cloud_storage_download_blob_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) path = cloud_storage_download_blob ( \"bucket\" , \"blob\" , \"data_path\" , gcp_credentials ) return path example_cloud_storage_download_blob_flow () Source code in prefect_gcp/cloud_storage.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 @task async def cloud_storage_download_blob_to_file ( bucket : str , blob : str , path : Union [ str , Path ], gcp_credentials : \"GcpCredentials\" , chunk_size : Optional [ int ] = None , encryption_key : Optional [ str ] = None , timeout : Union [ float , Tuple [ float , float ]] = 60 , project : Optional [ str ] = None , ) -> Union [ str , Path ]: \"\"\" Downloads a blob to a file path. Args: bucket: Name of the bucket. blob: Name of the Cloud Storage blob. path: Downloads the contents to the provided file path; if the path is a directory, automatically joins the blob name. gcp_credentials: Credentials to use for authentication with GCP. chunk_size (int, optional): The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. encryption_key: An encryption key. timeout: The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The path to the blob object. Example: Downloads blob from bucket. ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_download_blob @flow() def example_cloud_storage_download_blob_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") path = cloud_storage_download_blob( \"bucket\", \"blob\", \"data_path\", gcp_credentials) return path example_cloud_storage_download_blob_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Downloading blob named %s from the %s bucket to %s \" , blob , bucket , path ) bucket_obj = await _get_bucket ( bucket , gcp_credentials , project = project ) blob_obj = bucket_obj . blob ( blob , chunk_size = chunk_size , encryption_key = encryption_key ) if os . path . isdir ( path ): if isinstance ( path , Path ): path = path . joinpath ( blob ) # keep as Path if Path is passed else : path = os . path . join ( path , blob ) # keep as str if a str is passed partial_download = partial ( blob_obj . download_to_filename , path , timeout = timeout ) await to_thread . run_sync ( partial_download ) return path","title":"cloud_storage_download_blob_to_file()"},{"location":"cloud_storage/#prefect_gcp.cloud_storage.cloud_storage_upload_blob_from_file","text":"Uploads a blob from file path or file-like object. Usage for passing in file-like object is if the data was downloaded from the web; can bypass writing to disk and directly upload to Cloud Storage. Parameters: Name Type Description Default file Union [ str , Path , BytesIO ] Path to data or file like object to upload. required bucket str Name of the bucket. required blob str Name of the Cloud Storage blob. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required chunk_size int The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. None encryption_key Optional [ str ] An encryption key. None timeout Union [ float , Tuple [ float , float ]] The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The blob name. Example Uploads blob to bucket. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_upload_blob_from_file @flow() def example_cloud_storage_upload_blob_from_file_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") blob = cloud_storage_upload_blob_from_file( \"/path/somewhere\", \"bucket\", \"blob\", gcp_credentials) return blob example_cloud_storage_upload_blob_from_file_flow() Source code in prefect_gcp/cloud_storage.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 @task async def cloud_storage_upload_blob_from_file ( file : Union [ str , Path , BytesIO ], bucket : str , blob : str , gcp_credentials : \"GcpCredentials\" , chunk_size : Optional [ int ] = None , encryption_key : Optional [ str ] = None , timeout : Union [ float , Tuple [ float , float ]] = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Uploads a blob from file path or file-like object. Usage for passing in file-like object is if the data was downloaded from the web; can bypass writing to disk and directly upload to Cloud Storage. Args: file: Path to data or file like object to upload. bucket: Name of the bucket. blob: Name of the Cloud Storage blob. gcp_credentials: Credentials to use for authentication with GCP. chunk_size (int, optional): The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. encryption_key: An encryption key. timeout: The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The blob name. Example: Uploads blob to bucket. ``` from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_upload_blob_from_file @flow() def example_cloud_storage_upload_blob_from_file_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") blob = cloud_storage_upload_blob_from_file( \"/path/somewhere\", \"bucket\", \"blob\", gcp_credentials) return blob example_cloud_storage_upload_blob_from_file_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Uploading blob named %s to the %s bucket\" , blob , bucket ) bucket_obj = await _get_bucket ( bucket , gcp_credentials , project = project ) blob_obj = bucket_obj . blob ( blob , chunk_size = chunk_size , encryption_key = encryption_key ) if isinstance ( file , BytesIO ): partial_upload = partial ( blob_obj . upload_from_file , file , timeout = timeout ) else : partial_upload = partial ( blob_obj . upload_from_filename , file , timeout = timeout ) await to_thread . run_sync ( partial_upload ) return blob","title":"cloud_storage_upload_blob_from_file()"},{"location":"cloud_storage/#prefect_gcp.cloud_storage.cloud_storage_upload_blob_from_string","text":"Uploads a blob from a string or bytes representation of data. Parameters: Name Type Description Default data Union [ str , bytes ] String or bytes representation of data to upload. required bucket str Name of the bucket. required blob str Name of the Cloud Storage blob. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required content_type Optional [ str ] Type of content being uploaded. None chunk_size int The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. None encryption_key Optional [ str ] An encryption key. None timeout Union [ float , Tuple [ float , float ]] The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The blob name. Example Uploads blob to bucket. from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_upload_blob_from_string @flow () def example_cloud_storage_upload_blob_from_string_flow (): gcp_credentials = GcpCredentials ( service_account_file = \"/path/to/service/account/keyfile.json\" ) blob = cloud_storage_upload_blob_from_string ( \"data\" , \"bucket\" , \"blob\" , gcp_credentials ) return blob example_cloud_storage_upload_blob_from_string_flow () Source code in prefect_gcp/cloud_storage.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 @task async def cloud_storage_upload_blob_from_string ( data : Union [ str , bytes ], bucket : str , blob : str , gcp_credentials : \"GcpCredentials\" , content_type : Optional [ str ] = None , chunk_size : Optional [ int ] = None , encryption_key : Optional [ str ] = None , timeout : Union [ float , Tuple [ float , float ]] = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Uploads a blob from a string or bytes representation of data. Args: data: String or bytes representation of data to upload. bucket: Name of the bucket. blob: Name of the Cloud Storage blob. gcp_credentials: Credentials to use for authentication with GCP. content_type: Type of content being uploaded. chunk_size (int, optional): The size of a chunk of data whenever iterating (in bytes). This must be a multiple of 256 KB per the API specification. encryption_key: An encryption key. timeout: The number of seconds the transport should wait for the server response. Can also be passed as a tuple (connect_timeout, read_timeout). project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The blob name. Example: Uploads blob to bucket. ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.cloud_storage import cloud_storage_upload_blob_from_string @flow() def example_cloud_storage_upload_blob_from_string_flow(): gcp_credentials = GcpCredentials( service_account_file=\"/path/to/service/account/keyfile.json\") blob = cloud_storage_upload_blob_from_string( \"data\", \"bucket\", \"blob\", gcp_credentials) return blob example_cloud_storage_upload_blob_from_string_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Uploading blob named %s to the %s bucket\" , blob , bucket ) bucket_obj = await _get_bucket ( bucket , gcp_credentials , project = project ) blob_obj = bucket_obj . blob ( blob , chunk_size = chunk_size , encryption_key = encryption_key ) partial_upload = partial ( blob_obj . upload_from_string , data , content_type = content_type , timeout = timeout ) await to_thread . run_sync ( partial_upload ) return blob","title":"cloud_storage_upload_blob_from_string()"},{"location":"credentials/","text":"prefect_gcp.credentials Module handling GCP credentials GcpCredentials Block used to manage authentication with GCP. GCP authentication is handled via the google.oauth2 module or through the CLI. Specify either one of service account_file or service_account_info; if both are not specified, the client will try to detect the service account info stored in the env from the command, gcloud auth application-default login . Refer to the Authentication docs for more info about the possible credential configurations. Parameters: Name Type Description Default service_account_file Path to the service account JSON keyfile. required service_account_info The contents of the keyfile as a JSON string / dictionary. required project Name of the project to use. required Source code in prefect_gcp/credentials.pyclass GcpCredentials ( Block ): \"\"\" Block used to manage authentication with GCP. GCP authentication is handled via the `google.oauth2` module or through the CLI. Specify either one of service account_file or service_account_info; if both are not specified, the client will try to detect the service account info stored in the env from the command, `gcloud auth application-default login`. Refer to the [Authentication docs](https://cloud.google.com/docs/authentication/production) for more info about the possible credential configurations. Args: service_account_file: Path to the service account JSON keyfile. service_account_info: The contents of the keyfile as a JSON string / dictionary. project: Name of the project to use. \"\"\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/4CD4wwbiIKPkZDt4U3TEuW/c112fe85653da054b6d5334ef662bec4/gcp.png?h=250\" # noqa _block_type_name = \"GCP Credentials\" service_account_file : Optional [ Path ] = None service_account_info : Optional [ Json ] = None project : Optional [ str ] = None @staticmethod def _get_credentials_from_service_account ( service_account_file : Optional [ str ] = None , service_account_info : Optional [ Dict [ str , str ]] = None , ) -> Credentials : \"\"\" Helper method to serialize credentials by using either service_account_file or service_account_info. \"\"\" if service_account_info and service_account_file : raise ValueError ( \"Only one of service_account_info or service_account_file \" \"can be specified at once\" ) elif service_account_file : if not os . path . exists ( service_account_file ): raise ValueError ( \"The provided path to the service account is invalid\" ) elif isinstance ( service_account_file , Path ): service_account_file = service_account_file . expanduser () else : service_account_file = os . path . expanduser ( service_account_file ) credentials = Credentials . from_service_account_file ( service_account_file ) elif service_account_info : credentials = Credentials . from_service_account_info ( service_account_info ) else : return None return credentials @_raise_help_msg ( \"cloud_storage\" ) def get_cloud_storage_client ( self , project : Optional [ str ] = None ) -> \"StorageClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. Examples: Gets a GCP Cloud Storage client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_cloud_storage_client() example_get_client_flow() ``` Gets a GCP Cloud Storage client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_cloud_storage_client() example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # override class project if method project is provided project = project or self . project storage_client = StorageClient ( credentials = credentials , project = project ) return storage_client @_raise_help_msg ( \"bigquery\" ) def get_bigquery_client ( self , project : str = None , location : str = None ) -> \"BigQueryClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. location: Location to use. Examples: Gets a GCP BigQuery client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_bigquery_client() example_get_client_flow() ``` Gets a GCP BigQuery client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_bigquery_client(json) example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # override class project if method project is provided project = project or self . project big_query_client = BigQueryClient ( credentials = credentials , project = project , location = location ) return big_query_client @_raise_help_msg ( \"secret_manager\" ) def get_secret_manager_client ( self ) -> \"SecretManagerServiceClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. Examples: Gets a GCP Secret Manager client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_secret_manager_client() example_get_client_flow() ``` Gets a GCP Cloud Storage client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": \"private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_secret_manager_client() example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # doesn't accept project; must pass in project in tasks secret_manager_client = SecretManagerServiceClient ( credentials = credentials ) return secret_manager_client get_bigquery_client Parameters: Name Type Description Default project str Name of the project to use; overrides the base class's project if provided. None location str Location to use. None Examples: Gets a GCP BigQuery client from a path. from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials ( service_account_file = service_account_file ) . get_bigquery_client () example_get_client_flow () Gets a GCP BigQuery client from a JSON str. import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_info = json . dumps ({ \"type\" : \"service_account\" , \"project_id\" : \"project_id\" , \"private_key_id\" : \"private_key_id\" , \"private_key\" : private_key \", \"client_email\" : \"client_email\" , \"client_id\" : \"client_id\" , \"auth_uri\" : \"auth_uri\" , \"token_uri\" : \"token_uri\" , \"auth_provider_x509_cert_url\" : \"auth_provider_x509_cert_url\" , \"client_x509_cert_url\" : \"client_x509_cert_url\" }) client = GcpCredentials ( service_account_info = service_account_info ) . get_bigquery_client ( json ) example_get_client_flow () Source code in prefect_gcp/credentials.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 @_raise_help_msg ( \"bigquery\" ) def get_bigquery_client ( self , project : str = None , location : str = None ) -> \"BigQueryClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. location: Location to use. Examples: Gets a GCP BigQuery client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_bigquery_client() example_get_client_flow() ``` Gets a GCP BigQuery client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_bigquery_client(json) example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # override class project if method project is provided project = project or self . project big_query_client = BigQueryClient ( credentials = credentials , project = project , location = location ) return big_query_client get_cloud_storage_client Parameters: Name Type Description Default project Optional [ str ] Name of the project to use; overrides the base class's project if provided. None Examples: Gets a GCP Cloud Storage client from a path. from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials ( service_account_file = service_account_file ) . get_cloud_storage_client () example_get_client_flow () Gets a GCP Cloud Storage client from a JSON str. import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_info = json . dumps ({ \"type\" : \"service_account\" , \"project_id\" : \"project_id\" , \"private_key_id\" : \"private_key_id\" , \"private_key\" : private_key \", \"client_email\" : \"client_email\" , \"client_id\" : \"client_id\" , \"auth_uri\" : \"auth_uri\" , \"token_uri\" : \"token_uri\" , \"auth_provider_x509_cert_url\" : \"auth_provider_x509_cert_url\" , \"client_x509_cert_url\" : \"client_x509_cert_url\" }) client = GcpCredentials ( service_account_info = service_account_info ) . get_cloud_storage_client () example_get_client_flow () Source code in prefect_gcp/credentials.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 @_raise_help_msg ( \"cloud_storage\" ) def get_cloud_storage_client ( self , project : Optional [ str ] = None ) -> \"StorageClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. Examples: Gets a GCP Cloud Storage client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_cloud_storage_client() example_get_client_flow() ``` Gets a GCP Cloud Storage client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_cloud_storage_client() example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # override class project if method project is provided project = project or self . project storage_client = StorageClient ( credentials = credentials , project = project ) return storage_client get_secret_manager_client Parameters: Name Type Description Default project Name of the project to use; overrides the base class's project if provided. required Examples: Gets a GCP Secret Manager client from a path. from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials ( service_account_file = service_account_file ) . get_secret_manager_client () example_get_client_flow () Gets a GCP Cloud Storage client from a JSON str. import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_info = json . dumps ({ \"type\" : \"service_account\" , \"project_id\" : \"project_id\" , \"private_key_id\" : \"private_key_id\" , \"private_key\" : \"private_key\" , \"client_email\" : \"client_email\" , \"client_id\" : \"client_id\" , \"auth_uri\" : \"auth_uri\" , \"token_uri\" : \"token_uri\" , \"auth_provider_x509_cert_url\" : \"auth_provider_x509_cert_url\" , \"client_x509_cert_url\" : \"client_x509_cert_url\" }) client = GcpCredentials ( service_account_info = service_account_info ) . get_secret_manager_client () example_get_client_flow () Source code in prefect_gcp/credentials.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 @_raise_help_msg ( \"secret_manager\" ) def get_secret_manager_client ( self ) -> \"SecretManagerServiceClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. Examples: Gets a GCP Secret Manager client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_secret_manager_client() example_get_client_flow() ``` Gets a GCP Cloud Storage client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": \"private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_secret_manager_client() example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # doesn't accept project; must pass in project in tasks secret_manager_client = SecretManagerServiceClient ( credentials = credentials ) return secret_manager_client","title":"Credentials"},{"location":"credentials/#prefect_gcp.credentials","text":"Module handling GCP credentials","title":"credentials"},{"location":"credentials/#prefect_gcp.credentials.GcpCredentials","text":"Block used to manage authentication with GCP. GCP authentication is handled via the google.oauth2 module or through the CLI. Specify either one of service account_file or service_account_info; if both are not specified, the client will try to detect the service account info stored in the env from the command, gcloud auth application-default login . Refer to the Authentication docs for more info about the possible credential configurations. Parameters: Name Type Description Default service_account_file Path to the service account JSON keyfile. required service_account_info The contents of the keyfile as a JSON string / dictionary. required project Name of the project to use. required Source code in prefect_gcp/credentials.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 class GcpCredentials ( Block ): \"\"\" Block used to manage authentication with GCP. GCP authentication is handled via the `google.oauth2` module or through the CLI. Specify either one of service account_file or service_account_info; if both are not specified, the client will try to detect the service account info stored in the env from the command, `gcloud auth application-default login`. Refer to the [Authentication docs](https://cloud.google.com/docs/authentication/production) for more info about the possible credential configurations. Args: service_account_file: Path to the service account JSON keyfile. service_account_info: The contents of the keyfile as a JSON string / dictionary. project: Name of the project to use. \"\"\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/4CD4wwbiIKPkZDt4U3TEuW/c112fe85653da054b6d5334ef662bec4/gcp.png?h=250\" # noqa _block_type_name = \"GCP Credentials\" service_account_file : Optional [ Path ] = None service_account_info : Optional [ Json ] = None project : Optional [ str ] = None @staticmethod def _get_credentials_from_service_account ( service_account_file : Optional [ str ] = None , service_account_info : Optional [ Dict [ str , str ]] = None , ) -> Credentials : \"\"\" Helper method to serialize credentials by using either service_account_file or service_account_info. \"\"\" if service_account_info and service_account_file : raise ValueError ( \"Only one of service_account_info or service_account_file \" \"can be specified at once\" ) elif service_account_file : if not os . path . exists ( service_account_file ): raise ValueError ( \"The provided path to the service account is invalid\" ) elif isinstance ( service_account_file , Path ): service_account_file = service_account_file . expanduser () else : service_account_file = os . path . expanduser ( service_account_file ) credentials = Credentials . from_service_account_file ( service_account_file ) elif service_account_info : credentials = Credentials . from_service_account_info ( service_account_info ) else : return None return credentials @_raise_help_msg ( \"cloud_storage\" ) def get_cloud_storage_client ( self , project : Optional [ str ] = None ) -> \"StorageClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. Examples: Gets a GCP Cloud Storage client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_cloud_storage_client() example_get_client_flow() ``` Gets a GCP Cloud Storage client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_cloud_storage_client() example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # override class project if method project is provided project = project or self . project storage_client = StorageClient ( credentials = credentials , project = project ) return storage_client @_raise_help_msg ( \"bigquery\" ) def get_bigquery_client ( self , project : str = None , location : str = None ) -> \"BigQueryClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. location: Location to use. Examples: Gets a GCP BigQuery client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_bigquery_client() example_get_client_flow() ``` Gets a GCP BigQuery client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_bigquery_client(json) example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # override class project if method project is provided project = project or self . project big_query_client = BigQueryClient ( credentials = credentials , project = project , location = location ) return big_query_client @_raise_help_msg ( \"secret_manager\" ) def get_secret_manager_client ( self ) -> \"SecretManagerServiceClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. Examples: Gets a GCP Secret Manager client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_secret_manager_client() example_get_client_flow() ``` Gets a GCP Cloud Storage client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": \"private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_secret_manager_client() example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # doesn't accept project; must pass in project in tasks secret_manager_client = SecretManagerServiceClient ( credentials = credentials ) return secret_manager_client","title":"GcpCredentials"},{"location":"credentials/#prefect_gcp.credentials.GcpCredentials.get_bigquery_client","text":"Parameters: Name Type Description Default project str Name of the project to use; overrides the base class's project if provided. None location str Location to use. None Examples: Gets a GCP BigQuery client from a path. from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials ( service_account_file = service_account_file ) . get_bigquery_client () example_get_client_flow () Gets a GCP BigQuery client from a JSON str. import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_info = json . dumps ({ \"type\" : \"service_account\" , \"project_id\" : \"project_id\" , \"private_key_id\" : \"private_key_id\" , \"private_key\" : private_key \", \"client_email\" : \"client_email\" , \"client_id\" : \"client_id\" , \"auth_uri\" : \"auth_uri\" , \"token_uri\" : \"token_uri\" , \"auth_provider_x509_cert_url\" : \"auth_provider_x509_cert_url\" , \"client_x509_cert_url\" : \"client_x509_cert_url\" }) client = GcpCredentials ( service_account_info = service_account_info ) . get_bigquery_client ( json ) example_get_client_flow () Source code in prefect_gcp/credentials.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 @_raise_help_msg ( \"bigquery\" ) def get_bigquery_client ( self , project : str = None , location : str = None ) -> \"BigQueryClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. location: Location to use. Examples: Gets a GCP BigQuery client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_bigquery_client() example_get_client_flow() ``` Gets a GCP BigQuery client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_bigquery_client(json) example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # override class project if method project is provided project = project or self . project big_query_client = BigQueryClient ( credentials = credentials , project = project , location = location ) return big_query_client","title":"get_bigquery_client()"},{"location":"credentials/#prefect_gcp.credentials.GcpCredentials.get_cloud_storage_client","text":"Parameters: Name Type Description Default project Optional [ str ] Name of the project to use; overrides the base class's project if provided. None Examples: Gets a GCP Cloud Storage client from a path. from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials ( service_account_file = service_account_file ) . get_cloud_storage_client () example_get_client_flow () Gets a GCP Cloud Storage client from a JSON str. import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_info = json . dumps ({ \"type\" : \"service_account\" , \"project_id\" : \"project_id\" , \"private_key_id\" : \"private_key_id\" , \"private_key\" : private_key \", \"client_email\" : \"client_email\" , \"client_id\" : \"client_id\" , \"auth_uri\" : \"auth_uri\" , \"token_uri\" : \"token_uri\" , \"auth_provider_x509_cert_url\" : \"auth_provider_x509_cert_url\" , \"client_x509_cert_url\" : \"client_x509_cert_url\" }) client = GcpCredentials ( service_account_info = service_account_info ) . get_cloud_storage_client () example_get_client_flow () Source code in prefect_gcp/credentials.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 @_raise_help_msg ( \"cloud_storage\" ) def get_cloud_storage_client ( self , project : Optional [ str ] = None ) -> \"StorageClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. Examples: Gets a GCP Cloud Storage client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_cloud_storage_client() example_get_client_flow() ``` Gets a GCP Cloud Storage client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_cloud_storage_client() example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # override class project if method project is provided project = project or self . project storage_client = StorageClient ( credentials = credentials , project = project ) return storage_client","title":"get_cloud_storage_client()"},{"location":"credentials/#prefect_gcp.credentials.GcpCredentials.get_secret_manager_client","text":"Parameters: Name Type Description Default project Name of the project to use; overrides the base class's project if provided. required Examples: Gets a GCP Secret Manager client from a path. from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials ( service_account_file = service_account_file ) . get_secret_manager_client () example_get_client_flow () Gets a GCP Cloud Storage client from a JSON str. import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow () def example_get_client_flow (): service_account_info = json . dumps ({ \"type\" : \"service_account\" , \"project_id\" : \"project_id\" , \"private_key_id\" : \"private_key_id\" , \"private_key\" : \"private_key\" , \"client_email\" : \"client_email\" , \"client_id\" : \"client_id\" , \"auth_uri\" : \"auth_uri\" , \"token_uri\" : \"token_uri\" , \"auth_provider_x509_cert_url\" : \"auth_provider_x509_cert_url\" , \"client_x509_cert_url\" : \"client_x509_cert_url\" }) client = GcpCredentials ( service_account_info = service_account_info ) . get_secret_manager_client () example_get_client_flow () Source code in prefect_gcp/credentials.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 @_raise_help_msg ( \"secret_manager\" ) def get_secret_manager_client ( self ) -> \"SecretManagerServiceClient\" : \"\"\" Args: project: Name of the project to use; overrides the base class's project if provided. Examples: Gets a GCP Secret Manager client from a path. ```python from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_file = \"~/.secrets/prefect-service-account.json\" client = GcpCredentials( service_account_file=service_account_file ).get_secret_manager_client() example_get_client_flow() ``` Gets a GCP Cloud Storage client from a JSON str. ```python import json from prefect import flow from prefect_gcp.credentials import GcpCredentials @flow() def example_get_client_flow(): service_account_info = json.dumps({ \"type\": \"service_account\", \"project_id\": \"project_id\", \"private_key_id\": \"private_key_id\", \"private_key\": \"private_key\", \"client_email\": \"client_email\", \"client_id\": \"client_id\", \"auth_uri\": \"auth_uri\", \"token_uri\": \"token_uri\", \"auth_provider_x509_cert_url\": \"auth_provider_x509_cert_url\", \"client_x509_cert_url\": \"client_x509_cert_url\" }) client = GcpCredentials( service_account_info=service_account_info ).get_secret_manager_client() example_get_client_flow() ``` \"\"\" credentials = self . _get_credentials_from_service_account ( service_account_file = self . service_account_file , service_account_info = self . service_account_info , ) # doesn't accept project; must pass in project in tasks secret_manager_client = SecretManagerServiceClient ( credentials = credentials ) return secret_manager_client","title":"get_secret_manager_client()"},{"location":"secret_manager/","text":"prefect_gcp.secret_manager create_secret async Creates a secret in Google Cloud Platform's Secret Manager. Parameters: Name Type Description Default secret_name str Name of the secret to retrieve. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required timeout float The number of seconds the transport should wait for the server response. 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The path of the created secret. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import create_secret @flow () def example_cloud_storage_create_secret_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) secret_path = create_secret ( \"secret_name\" , gcp_credentials ) return secret_path example_cloud_storage_create_secret_flow () Source code in prefect_gcp/secret_manager.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 @task async def create_secret ( secret_name : str , gcp_credentials : \"GcpCredentials\" , timeout : float = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Creates a secret in Google Cloud Platform's Secret Manager. Args: secret_name: Name of the secret to retrieve. gcp_credentials: Credentials to use for authentication with GCP. timeout: The number of seconds the transport should wait for the server response. project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The path of the created secret. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import create_secret @flow() def example_cloud_storage_create_secret_flow(): gcp_credentials = GcpCredentials(project=\"project\") secret_path = create_secret(\"secret_name\", gcp_credentials) return secret_path example_cloud_storage_create_secret_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Creating the %s secret\" , secret_name ) client = gcp_credentials . get_secret_manager_client () project = project or gcp_credentials . project parent = f \"projects/ { project } \" secret_settings = { \"replication\" : { \"automatic\" : {}}} partial_create = partial ( client . create_secret , parent = parent , secret_id = secret_name , secret = secret_settings , timeout = timeout , ) response = await to_thread . run_sync ( partial_create ) return response . name delete_secret async Deletes the specified secret from Google Cloud Platform's Secret Manager. Parameters: Name Type Description Default secret_name str Name of the secret to delete. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required timeout float The number of seconds the transport should wait for the server response. 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The path of the deleted secret. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import delete_secret @flow () def example_cloud_storage_delete_secret_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) secret_path = delete_secret ( \"secret_name\" , gcp_credentials ) return secret_path example_cloud_storage_delete_secret_flow () Source code in prefect_gcp/secret_manager.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 @task async def delete_secret ( secret_name : str , gcp_credentials : \"GcpCredentials\" , timeout : float = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Deletes the specified secret from Google Cloud Platform's Secret Manager. Args: secret_name: Name of the secret to delete. gcp_credentials: Credentials to use for authentication with GCP. timeout: The number of seconds the transport should wait for the server response. project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The path of the deleted secret. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import delete_secret @flow() def example_cloud_storage_delete_secret_flow(): gcp_credentials = GcpCredentials(project=\"project\") secret_path = delete_secret(\"secret_name\", gcp_credentials) return secret_path example_cloud_storage_delete_secret_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Deleting %s secret\" , secret_name ) client = gcp_credentials . get_secret_manager_client () project = project or gcp_credentials . project name = f \"projects/ { project } /secrets/ { secret_name } /\" partial_delete = partial ( client . delete_secret , name = name , timeout = timeout ) await to_thread . run_sync ( partial_delete ) return name delete_secret_version async Deletes a version of a given secret from Google Cloud Platform's Secret Manager. Parameters: Name Type Description Default secret_name str Name of the secret to retrieve. required version_id int Version number of the secret to use; \"latest\" can NOT be used. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required timeout float The number of seconds the transport should wait for the server response. 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The path of the deleted secret version. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import delete_secret_version @flow () def example_cloud_storage_delete_secret_version_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) secret_value = delete_secret_version ( \"secret_name\" , 1 , gcp_credentials ) return secret_value example_cloud_storage_delete_secret_version_flow () Source code in prefect_gcp/secret_manager.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 @task async def delete_secret_version ( secret_name : str , version_id : int , gcp_credentials : \"GcpCredentials\" , timeout : float = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Deletes a version of a given secret from Google Cloud Platform's Secret Manager. Args: secret_name: Name of the secret to retrieve. version_id: Version number of the secret to use; \"latest\" can NOT be used. gcp_credentials: Credentials to use for authentication with GCP. timeout: The number of seconds the transport should wait for the server response. project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The path of the deleted secret version. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import delete_secret_version @flow() def example_cloud_storage_delete_secret_version_flow(): gcp_credentials = GcpCredentials(project=\"project\") secret_value = delete_secret_version(\"secret_name\", 1, gcp_credentials) return secret_value example_cloud_storage_delete_secret_version_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Reading %s version of %s secret\" , version_id , secret_name ) client = gcp_credentials . get_secret_manager_client () project = project or gcp_credentials . project if version_id == \"latest\" : raise ValueError ( \"The version_id cannot be 'latest'\" ) name = f \"projects/ { project } /secrets/ { secret_name } /versions/ { version_id } \" partial_destroy = partial ( client . destroy_secret_version , name = name , timeout = timeout ) await to_thread . run_sync ( partial_destroy ) return name read_secret async Reads the value of a given secret from Google Cloud Platform's Secret Manager. Parameters: Name Type Description Default secret_name str Name of the secret to retrieve. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required timeout float The number of seconds the transport should wait for the server response. 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str Contents of the specified secret. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import read_secret @flow () def example_cloud_storage_read_secret_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) secret_value = read_secret ( \"secret_name\" , gcp_credentials , version_id = 1 ) return secret_value example_cloud_storage_read_secret_flow () Source code in prefect_gcp/secret_manager.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 @task async def read_secret ( secret_name : str , gcp_credentials : \"GcpCredentials\" , version_id : Union [ str , int ] = \"latest\" , timeout : float = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Reads the value of a given secret from Google Cloud Platform's Secret Manager. Args: secret_name: Name of the secret to retrieve. gcp_credentials: Credentials to use for authentication with GCP. timeout: The number of seconds the transport should wait for the server response. project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: Contents of the specified secret. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import read_secret @flow() def example_cloud_storage_read_secret_flow(): gcp_credentials = GcpCredentials(project=\"project\") secret_value = read_secret(\"secret_name\", gcp_credentials, version_id=1) return secret_value example_cloud_storage_read_secret_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Reading %s version of %s secret\" , version_id , secret_name ) client = gcp_credentials . get_secret_manager_client () project = project or gcp_credentials . project name = f \"projects/ { project } /secrets/ { secret_name } /versions/ { version_id } \" partial_access = partial ( client . access_secret_version , name = name , timeout = timeout ) response = await to_thread . run_sync ( partial_access ) secret = response . payload . data . decode ( \"UTF-8\" ) return secret update_secret async Updates a secret in Google Cloud Platform's Secret Manager. Parameters: Name Type Description Default secret_name str Name of the secret to retrieve. required secret_value Union [ str , bytes ] Desired value of the secret. Can be either str or bytes . required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required timeout float The number of seconds the transport should wait for the server response. 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The path of the updated secret. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import update_secret @flow () def example_cloud_storage_update_secret_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) secret_path = update_secret ( \"secret_name\" , \"secret_value\" , gcp_credentials ) return secret_path example_cloud_storage_update_secret_flow () Source code in prefect_gcp/secret_manager.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 @task async def update_secret ( secret_name : str , secret_value : Union [ str , bytes ], gcp_credentials : \"GcpCredentials\" , timeout : float = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Updates a secret in Google Cloud Platform's Secret Manager. Args: secret_name: Name of the secret to retrieve. secret_value: Desired value of the secret. Can be either `str` or `bytes`. gcp_credentials: Credentials to use for authentication with GCP. timeout: The number of seconds the transport should wait for the server response. project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The path of the updated secret. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import update_secret @flow() def example_cloud_storage_update_secret_flow(): gcp_credentials = GcpCredentials(project=\"project\") secret_path = update_secret(\"secret_name\", \"secret_value\", gcp_credentials) return secret_path example_cloud_storage_update_secret_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Updating the %s secret\" , secret_name ) client = gcp_credentials . get_secret_manager_client () project = project or gcp_credentials . project parent = f \"projects/ { project } /secrets/ { secret_name } \" if isinstance ( secret_value , str ): secret_value = secret_value . encode ( \"UTF-8\" ) partial_add = partial ( client . add_secret_version , parent = parent , payload = { \"data\" : secret_value }, timeout = timeout , ) response = await to_thread . run_sync ( partial_add ) return response . name","title":"Secret Manager"},{"location":"secret_manager/#prefect_gcp.secret_manager","text":"","title":"secret_manager"},{"location":"secret_manager/#prefect_gcp.secret_manager.create_secret","text":"Creates a secret in Google Cloud Platform's Secret Manager. Parameters: Name Type Description Default secret_name str Name of the secret to retrieve. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required timeout float The number of seconds the transport should wait for the server response. 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The path of the created secret. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import create_secret @flow () def example_cloud_storage_create_secret_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) secret_path = create_secret ( \"secret_name\" , gcp_credentials ) return secret_path example_cloud_storage_create_secret_flow () Source code in prefect_gcp/secret_manager.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 @task async def create_secret ( secret_name : str , gcp_credentials : \"GcpCredentials\" , timeout : float = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Creates a secret in Google Cloud Platform's Secret Manager. Args: secret_name: Name of the secret to retrieve. gcp_credentials: Credentials to use for authentication with GCP. timeout: The number of seconds the transport should wait for the server response. project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The path of the created secret. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import create_secret @flow() def example_cloud_storage_create_secret_flow(): gcp_credentials = GcpCredentials(project=\"project\") secret_path = create_secret(\"secret_name\", gcp_credentials) return secret_path example_cloud_storage_create_secret_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Creating the %s secret\" , secret_name ) client = gcp_credentials . get_secret_manager_client () project = project or gcp_credentials . project parent = f \"projects/ { project } \" secret_settings = { \"replication\" : { \"automatic\" : {}}} partial_create = partial ( client . create_secret , parent = parent , secret_id = secret_name , secret = secret_settings , timeout = timeout , ) response = await to_thread . run_sync ( partial_create ) return response . name","title":"create_secret()"},{"location":"secret_manager/#prefect_gcp.secret_manager.delete_secret","text":"Deletes the specified secret from Google Cloud Platform's Secret Manager. Parameters: Name Type Description Default secret_name str Name of the secret to delete. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required timeout float The number of seconds the transport should wait for the server response. 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The path of the deleted secret. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import delete_secret @flow () def example_cloud_storage_delete_secret_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) secret_path = delete_secret ( \"secret_name\" , gcp_credentials ) return secret_path example_cloud_storage_delete_secret_flow () Source code in prefect_gcp/secret_manager.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 @task async def delete_secret ( secret_name : str , gcp_credentials : \"GcpCredentials\" , timeout : float = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Deletes the specified secret from Google Cloud Platform's Secret Manager. Args: secret_name: Name of the secret to delete. gcp_credentials: Credentials to use for authentication with GCP. timeout: The number of seconds the transport should wait for the server response. project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The path of the deleted secret. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import delete_secret @flow() def example_cloud_storage_delete_secret_flow(): gcp_credentials = GcpCredentials(project=\"project\") secret_path = delete_secret(\"secret_name\", gcp_credentials) return secret_path example_cloud_storage_delete_secret_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Deleting %s secret\" , secret_name ) client = gcp_credentials . get_secret_manager_client () project = project or gcp_credentials . project name = f \"projects/ { project } /secrets/ { secret_name } /\" partial_delete = partial ( client . delete_secret , name = name , timeout = timeout ) await to_thread . run_sync ( partial_delete ) return name","title":"delete_secret()"},{"location":"secret_manager/#prefect_gcp.secret_manager.delete_secret_version","text":"Deletes a version of a given secret from Google Cloud Platform's Secret Manager. Parameters: Name Type Description Default secret_name str Name of the secret to retrieve. required version_id int Version number of the secret to use; \"latest\" can NOT be used. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required timeout float The number of seconds the transport should wait for the server response. 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The path of the deleted secret version. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import delete_secret_version @flow () def example_cloud_storage_delete_secret_version_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) secret_value = delete_secret_version ( \"secret_name\" , 1 , gcp_credentials ) return secret_value example_cloud_storage_delete_secret_version_flow () Source code in prefect_gcp/secret_manager.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 @task async def delete_secret_version ( secret_name : str , version_id : int , gcp_credentials : \"GcpCredentials\" , timeout : float = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Deletes a version of a given secret from Google Cloud Platform's Secret Manager. Args: secret_name: Name of the secret to retrieve. version_id: Version number of the secret to use; \"latest\" can NOT be used. gcp_credentials: Credentials to use for authentication with GCP. timeout: The number of seconds the transport should wait for the server response. project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The path of the deleted secret version. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import delete_secret_version @flow() def example_cloud_storage_delete_secret_version_flow(): gcp_credentials = GcpCredentials(project=\"project\") secret_value = delete_secret_version(\"secret_name\", 1, gcp_credentials) return secret_value example_cloud_storage_delete_secret_version_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Reading %s version of %s secret\" , version_id , secret_name ) client = gcp_credentials . get_secret_manager_client () project = project or gcp_credentials . project if version_id == \"latest\" : raise ValueError ( \"The version_id cannot be 'latest'\" ) name = f \"projects/ { project } /secrets/ { secret_name } /versions/ { version_id } \" partial_destroy = partial ( client . destroy_secret_version , name = name , timeout = timeout ) await to_thread . run_sync ( partial_destroy ) return name","title":"delete_secret_version()"},{"location":"secret_manager/#prefect_gcp.secret_manager.read_secret","text":"Reads the value of a given secret from Google Cloud Platform's Secret Manager. Parameters: Name Type Description Default secret_name str Name of the secret to retrieve. required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required timeout float The number of seconds the transport should wait for the server response. 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str Contents of the specified secret. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import read_secret @flow () def example_cloud_storage_read_secret_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) secret_value = read_secret ( \"secret_name\" , gcp_credentials , version_id = 1 ) return secret_value example_cloud_storage_read_secret_flow () Source code in prefect_gcp/secret_manager.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 @task async def read_secret ( secret_name : str , gcp_credentials : \"GcpCredentials\" , version_id : Union [ str , int ] = \"latest\" , timeout : float = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Reads the value of a given secret from Google Cloud Platform's Secret Manager. Args: secret_name: Name of the secret to retrieve. gcp_credentials: Credentials to use for authentication with GCP. timeout: The number of seconds the transport should wait for the server response. project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: Contents of the specified secret. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import read_secret @flow() def example_cloud_storage_read_secret_flow(): gcp_credentials = GcpCredentials(project=\"project\") secret_value = read_secret(\"secret_name\", gcp_credentials, version_id=1) return secret_value example_cloud_storage_read_secret_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Reading %s version of %s secret\" , version_id , secret_name ) client = gcp_credentials . get_secret_manager_client () project = project or gcp_credentials . project name = f \"projects/ { project } /secrets/ { secret_name } /versions/ { version_id } \" partial_access = partial ( client . access_secret_version , name = name , timeout = timeout ) response = await to_thread . run_sync ( partial_access ) secret = response . payload . data . decode ( \"UTF-8\" ) return secret","title":"read_secret()"},{"location":"secret_manager/#prefect_gcp.secret_manager.update_secret","text":"Updates a secret in Google Cloud Platform's Secret Manager. Parameters: Name Type Description Default secret_name str Name of the secret to retrieve. required secret_value Union [ str , bytes ] Desired value of the secret. Can be either str or bytes . required gcp_credentials 'GcpCredentials' Credentials to use for authentication with GCP. required timeout float The number of seconds the transport should wait for the server response. 60 project Optional [ str ] Name of the project to use; overrides the gcp_credentials project if provided. None Returns: Type Description str The path of the updated secret. Example from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import update_secret @flow () def example_cloud_storage_update_secret_flow (): gcp_credentials = GcpCredentials ( project = \"project\" ) secret_path = update_secret ( \"secret_name\" , \"secret_value\" , gcp_credentials ) return secret_path example_cloud_storage_update_secret_flow () Source code in prefect_gcp/secret_manager.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 @task async def update_secret ( secret_name : str , secret_value : Union [ str , bytes ], gcp_credentials : \"GcpCredentials\" , timeout : float = 60 , project : Optional [ str ] = None , ) -> str : \"\"\" Updates a secret in Google Cloud Platform's Secret Manager. Args: secret_name: Name of the secret to retrieve. secret_value: Desired value of the secret. Can be either `str` or `bytes`. gcp_credentials: Credentials to use for authentication with GCP. timeout: The number of seconds the transport should wait for the server response. project: Name of the project to use; overrides the gcp_credentials project if provided. Returns: The path of the updated secret. Example: ```python from prefect import flow from prefect_gcp import GcpCredentials from prefect_gcp.secret_manager import update_secret @flow() def example_cloud_storage_update_secret_flow(): gcp_credentials = GcpCredentials(project=\"project\") secret_path = update_secret(\"secret_name\", \"secret_value\", gcp_credentials) return secret_path example_cloud_storage_update_secret_flow() ``` \"\"\" logger = get_run_logger () logger . info ( \"Updating the %s secret\" , secret_name ) client = gcp_credentials . get_secret_manager_client () project = project or gcp_credentials . project parent = f \"projects/ { project } /secrets/ { secret_name } \" if isinstance ( secret_value , str ): secret_value = secret_value . encode ( \"UTF-8\" ) partial_add = partial ( client . add_secret_version , parent = parent , payload = { \"data\" : secret_value }, timeout = timeout , ) response = await to_thread . run_sync ( partial_add ) return response . name","title":"update_secret()"}]}